{
	// Place your oktan-api workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New empty async request with library and module exports": {
		"scope": "javascript",
		"prefix": "aschan",
		"body": [
			"const asyncHandler = require('express-async-handler');",
			"",
			"const $1 = asyncHandler(async(req, res) =>{",
			"$2",
			"})",
			"",
			"module.exports = {$1}"
		],
		"description": "new express async handler function with library and module export"
	},
	"New async request": {
		"scope": "javascript",
		"prefix": "asc",
		"body": [
			"const $1 = asyncHandler(async(req, res) =>{",
			"$2",
			"})"
		],
		"description": "new express async handler function"
	},
	"New async middleware": {
		"scope": "javascript",
		"prefix": "ascn",
		"body": [
			"const ${1:name} = asyncHandler(async(req, res, next) =>{",
			"\t${2:function}",
			"})"
		],
		"description": "new express async handler middleware function"
	},
	"Return async with asyncHandler": {
		"scope": "javascript",
		"prefix": "ascr",
		"body": [
			"return asyncHandler(async(req, res) =>{",
			"\t${1:function}",
			"})"
		],
		"description": "new express async handler return function"
	}
}